package org.exoplatform.ecm.connector.malwareDetection;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.jcr.Node;
import javax.jcr.Property;

import org.apache.commons.lang.StringUtils;

import org.exoplatform.container.xml.InitParams;
import org.exoplatform.services.jcr.RepositoryService;
import org.exoplatform.services.jcr.core.ExtendedSession;
import org.exoplatform.services.jcr.impl.core.NodeImpl;
import org.exoplatform.services.log.ExoLogger;
import org.exoplatform.services.log.Log;
import org.exoplatform.services.wcm.core.NodetypeConstant;
import org.exoplatform.services.wcm.utils.WCMCoreUtils;
import org.exoplatform.social.service.malwareDetection.MalwareDetectionService;
import org.exoplatform.social.service.malwareDetection.connector.MalwareDetectionItemConnector;

public class MalwareDetectionJcrConnector extends MalwareDetectionItemConnector {

  private static final Log LOGGER = ExoLogger.getExoLogger(MalwareDetectionJcrConnector.class);
  
  private static final String PORTAL_CONTAINER = "_portal";

  private RepositoryService repositoryService;
  
  private  static final String JCR = "jcr";
  
  private static final String VALUES = "values";
  
  private static final String MALWARE_INFECTED_JCR_NODE_DETECTION = "MalwareInfectedJcrNodeDetection";

  public MalwareDetectionJcrConnector(InitParams initParams, RepositoryService repositoryService) {
    super(initParams);
    this.repositoryService = repositoryService;
  }

  @Override
  public List<Map<String, String>> getInfectedItems(String infectedJcrNodePath) {
    String infectedJcrNodeIdentifier = getJcrNodeIdentifier(infectedJcrNodePath);
    String jcrNodeWorkspace = getJcrNodeWorkspace(infectedJcrNodePath);
    List<Map<String, String>> infectedJcrNodes = new ArrayList<Map<String, String>>();
    try {
      ExtendedSession session = (ExtendedSession) WCMCoreUtils.getSystemSessionProvider().getSession(jcrNodeWorkspace, repositoryService.getCurrentRepository());
      Property infectedJcrNodeProperty = session.getPropertyByIdentifier(infectedJcrNodeIdentifier);
      if (infectedJcrNodeProperty.getName().equals(NodetypeConstant.JCR_DATA)) {
        Node infectedJcrContentNode = infectedJcrNodeProperty.getParent();
        Node infectedJcNode = infectedJcrContentNode.getParent();
        long startTime = System.currentTimeMillis();
        Map<String, String> infectedJcrNode = new HashMap<String, String>();
        infectedJcrNode.put(INFECTED_ITEM_NAME, infectedJcNode.getName());
        infectedJcrNode.put(INFECTED_ITEM_LAST_MODIFIER, infectedJcNode.getProperty(NodetypeConstant.EXO_LAST_MODIFIER).getString());
        infectedJcrNodes.add(infectedJcrNode);
        long endTime = System.currentTimeMillis();
        LOGGER.info("service={} operation={} parameters=\"jcrNodeIdentifier:{}\" \"jcrNodeName:{}\" \"jcrNodeLastModifier:{}\" status=ok " + "duration_ms={}",
                    MALWARE_DETECTION_FEATURE,
                    MALWARE_INFECTED_JCR_NODE_DETECTION,
                    ((NodeImpl) infectedJcNode).getIdentifier(),
                    infectedJcNode.getName(),
                    infectedJcNode.getProperty(NodetypeConstant.EXO_LAST_MODIFIER).getString(),
                    endTime - startTime);
      }
    } catch (Exception e) {
      LOGGER.error("Error when trying to get the infected jcr node informations from jcrNodeIdentifier={}", infectedJcrNodeIdentifier, e);
    }
    return infectedJcrNodes;
  }

  @Override
  public void cleanInfectedItem(String infectedJcrNodePath) {
    // TODO
  }
  
  @Override
  public boolean canProcessInfectedItem(String infectedJcrNodePath) {
    String infectedJcrNodePathSeparator = MalwareDetectionService.getPathSeparator(infectedJcrNodePath);
    return infectedJcrNodePath.contains(infectedJcrNodePathSeparator + JCR + infectedJcrNodePathSeparator + VALUES + infectedJcrNodePathSeparator);
  }

  private String getJcrNodeIdentifier(String infectedJcrNodePath) {
    String infectedJcrNodeIdentifier = StringUtils.substringAfter(infectedJcrNodePath, PORTAL_CONTAINER);
    String infectedJcrNodePathSeparator = MalwareDetectionService.getPathSeparator(infectedJcrNodePath);
    infectedJcrNodeIdentifier = StringUtils.substringBeforeLast(infectedJcrNodeIdentifier, infectedJcrNodePathSeparator);
    return StringUtils.remove(infectedJcrNodeIdentifier, infectedJcrNodePathSeparator);

  }

  private String getJcrNodeWorkspace(String infectedJcrNodePath) {
    return StringUtils.substringBetween(infectedJcrNodePath, VALUES + MalwareDetectionService.getPathSeparator(infectedJcrNodePath), PORTAL_CONTAINER);
  }
}