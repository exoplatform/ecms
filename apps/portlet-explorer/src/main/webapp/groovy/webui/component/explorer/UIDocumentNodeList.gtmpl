<%
  import java.util.ArrayList;
  import java.net.URLEncoder;
  import org.exoplatform.ecm.webui.utils.Utils ;
  import org.exoplatform.web.application.Parameter ;
  import org.exoplatform.webui.core.UIRightClickPopupMenu ;
  import org.exoplatform.ecm.webui.component.explorer.UIWorkingArea;
  import org.exoplatform.ecm.webui.component.explorer.UIDocumentInfo;
  import org.exoplatform.ecm.webui.component.explorer.UIDocumentInfo.ExplorerTemplateType;
  import org.exoplatform.services.cms.link.LinkManager;
  import org.exoplatform.ecm.webui.component.explorer.UIJCRExplorer;
  import javax.jcr.PathNotFoundException;
  import org.exoplatform.services.wcm.utils.WCMCoreUtils;
  import org.exoplatform.services.jcr.RepositoryService;
  import org.exoplatform.services.wcm.core.NodetypeConstant;
  import java.net.URLEncoder;
  import org.exoplatform.services.wcm.core.NodeLocation;
  import org.exoplatform.services.cms.link.NodeLinkAware;
  import javax.jcr.Node;
  import org.apache.commons.lang.StringUtils;

  def linkManager = WCMCoreUtils.getService(LinkManager.class);
  def uiDocumentInfo = uicomponent.getAncestorOfType(UIDocumentInfo.class);
  def uiWorkingArea = uicomponent.getAncestorOfType(UIWorkingArea.class);
  def uiExplorer = uicomponent.getAncestorOfType(UIJCRExplorer.class);
  def pref = uiExplorer.getPreference();
  def enableDragAndDrop = pref.isEnableDragAndDrop();
  def uiCustomActionComponent = uiWorkingArea.getCustomAction();
  UIRightClickPopupMenu contextMenu = uiDocumentInfo.getContextMenu();
  String componentId = uicomponent.getId();
  def rcontext = _ctx.getRequestContext() ;
  def jsManager = rcontext.getJavascriptManager();
  def areaId = uiDocumentInfo.getId();

  jsManager.require("SHARED/ecm-utils", "ecmutil").require("SHARED/uiFileView", "uiFileView").
  addScripts("uiFileView.UIFileView.initAllEvent('$areaId', '$enableDragAndDrop');");
  //Config to display columns with format: ["${column};${width}"]
  //Default 
  String[] arrColumns = ["exo:owner;95px","exo:dateModified;123px","exo:dateCreated;121px"];
  
%>
  <div id="$componentId" class="$componentId"> 
    <div class="uiListGrid">
      <%        
        String portalName = uiDocumentInfo.getPortalName() ;
        RepositoryService rService = uicomponent.getApplicationComponent(RepositoryService.class);
        String repository = rService.getCurrentRepository().getConfiguration().getName();
        String restContextName = Utils.getRestContextName(portalName);
        def permlink;
        int i = 0;
        for (data in uicomponent.getNodeChildrenList()) {
          writeNodes(0, i++, data, uiWorkingArea, linkManager, restContextName, repository, permlink, contextMenu, 
                     arrColumns, uiDocumentInfo, portalName, uiCustomActionComponent, componentId);
          if (data.isNodeType(NodetypeConstant.NT_FOLDER) || data.isNodeType(NodetypeConstant.NT_UNSTRUCTURED)) {
            if (data instanceof NodeLinkAware) {
              data = ((NodeLinkAware)data).getRealNode();
            }
            def idChild = uicomponent.getID(data);
            def childComponent = uicomponent.getChildById(idChild);
            if (childComponent == null) {
              childComponent = uicomponent.addUIDocList(idChild);
            }
            if (uiDocumentInfo.getExpandedFolders().contains(data.getPath())) {
              childComponent.setCurrentNode(data);
            }
            uicomponent.renderChild(childComponent);
          }
        }%>
		</div>
   <% 
   //re-initialize action
//    uiWorkingArea.initialize();
    if (uicomponent.isShowMoreButton()) { 
  %>
      
      <div class="FR MoreButton" onclick="<%=uicomponent.event("More")%>">
        <%=_ctx.appRes("FileView.label.more")%>
      </div>
      <br/>
  <% } %>

</div>  

<%
public void writeNodes(level, i, data, uiWorkingArea, linkManager, restContextName, repository, permlink, contextMenu, 
                         arrColumns, uiDocumentInfo, portalName, uiCustomActionComponent, componentId) {
  try {
    data.getSession().getItem(data.getPath());
  } catch(PathNotFoundException pne) {
    return;
  }
  i++;
  def isPreferenceNode = uiDocumentInfo.isPreferenceNode(data) ;
  def preferenceWS = data.getSession().getWorkspace().getName() ;
  String nodePath = data.getPath() ;
  String name = nodePath.substring(nodePath.lastIndexOf("/") + 1, nodePath.length()) ;   
  String title = uiWorkingArea.getTitle(data);
  String fileName = uicomponent.getFileName(data, title);
  String fileExtension = uicomponent.getFileExtension(data, title);
  String fileDate = uicomponent.getFileDate(data);
  def versionNum  = uicomponent.getVersionNumber(data);
  def author = uicomponent.getAuthorName(data);
  def fileSize = uicomponent.getFileSize(data);
  
  String actionLink = uiDocumentInfo.event("ChangeNode",Utils.formatNodeName(data.path), new Parameter("workspaceName", preferenceWS)) ;

  //Begin permlink
  def permLinkComponent =  uiWorkingArea.getPermlink(data);
  String strActs = "<li class=\"RightClickCustomItem\" style=\"display: none;\">" ;
  strActs += "<ul>"
  if (permLinkComponent != null) {
    permlink = permLinkComponent.getUIExtensionName();
    strActs +=  "<li class='menuItem'>";
    strActs +=  "<a exo:attr='ViewDocument' style='display: block;' href=\"" + permLinkComponent.getPermlink(data) + "\" target='_new' onclick=\"eXo.ecm.WCMUtils.hideContextMenu(this);eXo.ecm.UIFileView.clearCheckboxes();\">" ;
    strActs +=  " <i class='uiIconEcmsViewDocument'>" ;
    strActs +=  " </i>&nbsp;";
    strActs +=    _ctx.appRes("ECMContextMenu.event." + permlink);
    strActs +=  "</a>";
    strActs += "</li>";
  }      
  //Begin WebDav Action
  if (!data.isNodeType(Utils.EXO_RESTORELOCATION) && !Utils.isTrashHomeNode(data)) {
    if ((!linkManager.isLink(data) || linkManager.isTargetReachable(data)) && data.getPrimaryNodeType().getName().equals("nt:file")) {
      String mimeType="";
      try {
        mimeType=data.getNode("jcr:content").getProperty("jcr:mimeType").getString();
      } catch (Exception e) {                     
      }
      // This escape "'" for js
      String webDavPath = nodePath.contains("%27") ? nodePath.replaceAll("%27","%2527") : nodePath;
      String link ="javascript:eXo.ecm.ECMUtils.generateWebDAVLink('','"+ portalName +"','"+ restContextName +"','"+repository+"','"+ preferenceWS+ "','" + webDavPath +"','"+mimeType+"')";
      strActs +=  "<li class='menuItem'>";
      strActs +=    "<a exo:attr='Download' style='display: block;' onclick=\"eXo.ecm.WCMUtils.hideContextMenu(this);eXo.ecm.UIFileView.clearCheckboxes();\" href=\"" + link + "\" >" ;          
      strActs +=    "  <i class=\"uiIconDownload\"></i>&nbsp;" + _ctx.appRes("UITreeExplorer.label.webDavView");
      strActs +=    "</a>" ;            
      strActs += "</li>";
    } else {
      //data = Utils.getNodeSymLink(data);
      def dataTarget = data;
      if(uiDocumentInfo.isSymLink(data)) dataTarget = Utils.getNodeSymLink(data);
      if (dataTarget != null) {
        String link = "/" + restContextName + "/private/jcr/" + repository+ "/" + preferenceWS + Utils.formatNodeName(dataTarget.getPath());
        strActs +=  "<li class='menuItem'>";
        strActs +=    "<a exo:attr='Download' style='display: block; {behavior: url(#default#AnchorClick);}' onclick=\"eXo.ecm.WCMUtils.hideContextMenu(this);eXo.ecm.UIFileView.clearCheckboxes();window.open('" +link + "');\" target='_new' folder=\"" + link +"\">" ;          
        strActs +=    "  <i class=\"uiIconDownload\"></i>&nbsp;" + _ctx.appRes("UITreeExplorer.label.webDavView");
        strActs +=    "</a>" ;
        strActs += "</li>";
      }
    }
  }
  //End WebDav Action
  List customActs = uiDocumentInfo.getCustomActions(data);  
  Parameter[] params ;
  if (customActs.size() > 0) {            
    for (act in customActs) {
      String actName = act.getProperty("exo:name").getValue().getString() ;
      params = [new Parameter("workspaceName", preferenceWS), new Parameter("actionName",Utils.formatNodeName(act.getName()))] ;
      strActs +=  "<li class='menuItem'>";
      strActs += "<a exo:attr=\"" +  Utils.getNodeTypeIcon(act,"") + "\" style='display: block;' onclick=\"return eXo.webui.UIRightClickPopupMenu.prepareObjectId(event, this);eXo.ecm.UIFileView.clearCheckboxes();\" href=\"" + uiCustomActionComponent.event("Custom",Utils.formatNodeName(nodePath),params) + "\">" ;
      strActs += "  <i class=\"" + Utils.getNodeTypeIcon(act, "uiIconEcms") + "\"></i>$actName" ;
      strActs += "</a>" ;
      strActs += "</li>";
    }            
  }
  
  if (!data.isNodeType(Utils.EXO_RESTORELOCATION) && !Utils.isTrashHomeNode(data)) {
    String serverUrl= uiDocumentInfo.getWebDAVServerPrefix();
    String clipboardLink =serverUrl + "/" + restContextName + "/private/jcr/" + repository + "/" + preferenceWS + data.getPath();
    strActs +=  "<li class='menuItem' onclick='eXo.ecm.UIFileView.clearCheckboxes();'>";
    strActs +=  "<a exo:attr='CopyUrlToClipboard' style='display: block;' id='clip_button$componentId$i' path='$clipboardLink'>" ;
    strActs +=  " <i class='uiIconEcmsCopyUrlToClipboard'>" ;
    strActs +=  " </i>&nbsp;" ;
    strActs +=    _ctx.appRes("ECMContextMenu.event.GetURL");
    strActs +=  "</a>";
    strActs += "</li>";
  }
  
  strActs += "</ul>";
  strActs += "</li>";
  Boolean isLocked = false;
  String lockedLabel = "";
  String hiddenStyle = (data.isNodeType("exo:hiddenable"))?"color: #A0A0A0;":"";
  if (data.isLocked()) {
    isLocked = true;
    lockedLabel  = "("+_ctx.appRes("UIDocumentWorkspace.tooltip.LockedBy")+" "+data.getLock().getLockOwner()+")";
  }
%>
  <div class="rowView fileViewRowView Normal clearfix"  
       <%=uiDocumentInfo.getNodeAttributeInCommon(data)%> rightClickHandler="<%=uiDocumentInfo.getRightClickFunction(ExplorerTemplateType.TREELIST, data)%>"
       style="padding-left:<%=uicomponent.getPadding()*40%>px">
    $strActs
    <% def folderIcon = "noArrow";
       if (data.isNodeType(NodetypeConstant.NT_FOLDER) || data.isNodeType(NodetypeConstant.NT_UNSTRUCTURED)) { 
         folderIcon = uiDocumentInfo.getExpandedFolders().contains(data.path)? "uiIconArrowDown" : "uiIconArrowRight";
       }
       String expandLink = uicomponent.event("ExpandNode", Utils.formatNodeName(data.path), new Parameter("workspaceName", preferenceWS)) ;
       String collapseLink = uicomponent.event("CollapseNode", Utils.formatNodeName(data.path), new Parameter("workspaceName", preferenceWS)) ;
       expandLink = URLEncoder.encode(org.apache.commons.lang.StringEscapeUtils.unescapeHtml(expandLink), "utf-8");
       collapseLink = URLEncoder.encode(org.apache.commons.lang.StringEscapeUtils.unescapeHtml(collapseLink), "utf-8");
       
       def docListId = uicomponent.getID(data);
       def manageVersionAction = uicomponent.event("ManageVersions", Utils.formatNodeName(data.path), new Parameter("workspaceName", preferenceWS));
    %>
		<div class="columnArrow">
			<i class="$folderIcon"
					 onmousedown="eXo.ecm.UIFileView.clickFolder(this,'$expandLink', '$collapseLink', '$docListId',event);"
					 onmouseup="eXo.ecm.UIFileView.cancelEvent(event);">
			</i>
		</div>
    <div class="columnNodeType">
      <div data-placement="bottom" rel="tooltip" title="$title" class="<%=Utils.getNodeTypeIcon(data, "uiIcon24x24")%>">
        <%if(isLocked) {%>
          <div class="IconLocked"></div>
        <%}%>
        <%if(uiDocumentInfo.isSymLink(data)) {%>
          <div class="LinkSmall"></div>
        <%}%>
      </div>
    </div>
		<div class="columnCheckbox">
			<span class="uiCheckbox"><input type="checkbox" name="checkbox" class="checkbox"><span></span></span>
		</div>
    <div class="columnText" data-placement="bottom" rel="tooltip" title="$lockedLabel">
			<a href="javascript void(0)" onmousedown="$actionLink" onmouseup="eXo.ecm.UIFileView.cancelEvent(event);">
					<span class="nodeName"><%=fileName%><span>
			</a>
			<span class="nodeLabel fileExtension"><%=fileExtension%></span>

      <p class="fileInfoBottom">
        <% if (!"".equals(versionNum)) {%>
          <a href="<%=manageVersionAction%>" class="fileInfoVersion"><%=versionNum%></a>
        <% } %>
        <%=fileDate%>
        <%=author%>
        <% if (StringUtils.isNotEmpty(fileSize)) { %>
          <%=fileSize%> 
        <%}%>
      </p>
    </div>
  </div>
<%
    
}%>
