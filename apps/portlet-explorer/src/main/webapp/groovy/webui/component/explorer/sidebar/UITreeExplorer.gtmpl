<%
  import java.net.URLEncoder;
  import javax.jcr.Node;
  import javax.jcr.AccessDeniedException ;
  import org.exoplatform.ecm.webui.utils.Utils;
  import org.exoplatform.web.application.Parameter ;
  import org.exoplatform.webui.core.UIRightClickPopupMenu;
  import org.exoplatform.ecm.webui.component.explorer.UIWorkingArea;
  import org.exoplatform.ecm.webui.component.explorer.sidebar.TreeNode ;
	import javax.jcr.PathNotFoundException;
  import java.util.List;
	import java.util.ArrayList;
  import org.exoplatform.ecm.utils.text.Text;
  import org.exoplatform.services.jcr.RepositoryService;  
  
%>
<%

  def idSelected = uicomponent.getEncodeCurrentPath();
  def rcontext = _ctx.getRequestContext() ;
  def jsManager = rcontext.getJavascriptManager();
  jsManager.require("SHARED/ecm-utils", "ecmutil").
  addScripts("ecmutil.ECMUtils.selectedPath('${idSelected}');");

  public void writeNodes(TreeNode rootTree) {
    UIRightClickPopupMenu contextMenu = uicomponent.getContextMenu();
    def uiCustomActionComponent = uicomponent.getWorkingArea().getCustomAction();
    String serverPath = uicomponent.getServerPath();
    String portalName = uicomponent.getPortalName();
    String restContextName = Utils.getRestContextName(portalName);
    RepositoryService rService = uicomponent.getApplicationComponent(RepositoryService.class) ;
    String repository = rService.getCurrentRepository().getConfiguration().getName() ;  
    String drive = uicomponent.getDriveName();
    int counter = 1 ;     
	  List childrenNodes=uicomponent.getRenderedChildren(rootTree);
    boolean isPaginated=uicomponent.isPaginated(rootTree);    
    
		def realChildrenTrees = new ArrayList<TreeNode>();
		for(tempNode in childrenNodes) {
			try {
				if (uicomponent.isAllowNodeTypesOnTree(tempNode.getNode())) {
					rootTree.getNode().getSession().getItem(tempNode.getNodePath());
					realChildrenTrees.add(tempNode);
				}
			} catch(PathNotFoundException pne) {
				continue;
			}			
		}
		int childrenSize = realChildrenTrees.size();        
    if(!uicomponent.isSystemWorkspace()) {
      def rcontext = _ctx.getRequestContext();
      int depth = rootTree.getNode().getDepth() + 1;
      def jsManager = rcontext.getJavascriptManager();
    }

    for(treeNode in realChildrenTrees) {	    
			Node node = treeNode.getNode();			
    	node.refresh(true);
    	try {
    	  def primaryName = node.getPrimaryNodeType().getName();
    	} catch(Exception e) {
    	  continue;
    	}
	    String path = node.getPath() ;
	    String treeNodeName = uicomponent.getWorkingArea().getTitle(node);	    
	    def isPreferenceNode = uicomponent.isPreferenceNode(node) ;
	    def preferenceWS = node.getSession().getWorkspace().getName() ;
	    String mode = "ExpandTree";
	    String iconType = "expand";
	    String actionLink  ;
	    String expandLink ;
	    if(treeNode.isExpanded()) { 
	      mode = "Collapse" ;
	      iconType = "collapse";
	    }
	    if(isPreferenceNode) {
	      actionLink = uicomponent.event(mode, treeNode.getPath(), new Parameter("workspaceName", preferenceWS)) ;
	      expandLink = uicomponent.event("Expand", Utils.formatNodeName(treeNode.getPath()), new Parameter("workspaceName", preferenceWS)) ;
	    } else {
	      actionLink = uicomponent.event(mode, treeNode.getPath()) ;
	      expandLink = uicomponent.event("Expand", Utils.formatNodeName(treeNode.getPath())) ;
	    }
	    String strActs = "";
	    if(!uicomponent.isSystemWorkspace()) {
  	    strActs = "<ul class=\"RightClickCustomItem\" style=\"display: none;\">" ;

        //Begin permlink
  	    def permLinkComponent =  uicomponent.getWorkingArea().getPermlink(node);
        if (permLinkComponent != null) {
          strActs +=  "<li class='menuItem'>";
          strActs +=  "<a exo:attr='ViewDocument' style='display: block;' href=\"" + permLinkComponent.getPermlink(node) + "\" target='_new' onclick=\"return eXo.ecm.WCMUtils.hideContextMenu(this);\">";
          strActs +=  " <i class='uiIconEcmsViewDocument uiIconEcmsLightGrey'>" ;
          strActs +=  " </i> ";    
          strActs +=    _ctx.appRes("ECMContextMenu.event." + permLinkComponent.getUIExtensionName());
          strActs +=  "</a>";
          strActs +=  "</li>";
        }  
        //Begin for WebDav action
        if (!node.isNodeType(Utils.EXO_RESTORELOCATION) && !Utils.isTrashHomeNode(node)) {        
	  	    if (node.getPrimaryNodeType().getName().equals("nt:file")) {
	  	      String mimeType = "";
	  	      if (node.hasNode("jcr:content")) {
	  	        mimeType = node.getNode("jcr:content").getProperty("jcr:mimeType").getString();
	  	      }
	  	      // This escape "'" for js
	    		  String webDavPath = node.getPath().contains("%27") ? node.getPath().replaceAll("%27","%2527") : node.getPath();
	    		  String link ="javascript:eXo.ecm.ECMUtils.generateWebDAVLink('','"+ portalName +"','"+ restContextName +"','"+repository+"','"+ preferenceWS+ "','" + webDavPath +"','"+mimeType+"')";
            strActs +=  "<li class='menuItem'>";
            strActs +=    "<a class='itemDownload' exo:attr='Download' style='display: block;' onclick=\"return eXo.ecm.WCMUtils.hideContextMenu(this);\" href=\"" + link + "\" >" ;          
            strActs +=    "  <i class=\"uiIconDownload uiIconLightGray\"></i> " + _ctx.appRes("UITreeExplorer.label.webDavView");
            strActs +=    "</a>" ;            
            strActs += "</li>";
	  		  } else {
	  		  	def nodeTarget = node;
					  if(uicomponent.isSymLink(node)) nodeTarget = Utils.getNodeSymLink(node);
						if (nodeTarget!= null) {	 
						  String link = "/" + restContextName + "/private/jcr/" + repository+ "/" + preferenceWS + Utils.formatNodeName(nodeTarget.getPath());
              strActs +=  "<li class='menuItem'>";
              strActs +=    "<a  class='itemDownload' exo:attr='Download' style='display: block; {behavior: url(#default#AnchorClick);}' onclick=\"eXo.ecm.WCMUtils.hideContextMenu(this);window.open('" +link + "');\" target='_new' folder=\"" + link +"\">" ;          
              strActs +=    "  <i class=\"uiIconDownload uiIconLightGray\"></i> " + _ctx.appRes("UITreeExplorer.label.webDavView");
              strActs +=    "</a>" ;
              strActs += "</li>";
						}
	  		  }
        }
  		  	  
  		  //End WebDAV Action					        
  		  List customActs = uicomponent.getCustomActions(node) ;				  
  	    Parameter[] params ;
  	    if(customActs.size() > 0) {				    
  			  for(act in customActs) {
  			    String actName = act.getProperty("exo:name").getValue().getString() ;
  			    params = [new Parameter("workspaceName", preferenceWS), new Parameter("actionName", Utils.formatNodeName(act.getName()))] ;
  			    strActs +=  "<li class='menuItem'>";
            strActs += "<a exo:attr=\"" +  Utils.getNodeTypeIcon(act,"") + "\" style='display: block;' title=\"$actName\" onclick=\"" + uiCustomActionComponent.event("Custom", Utils.formatNodeName(path), params) + "\">" ;
            strActs += "  <i class=\"" + Utils.getNodeTypeIcon(act, "uiIconEcms") + "\"></i>&nbsp;";
            if (actName.length() > 10) strActs += actName.substring(0, 10) + "...";
            else strActs += actName;
            strActs += "</a>" ;
            strActs += "</li>";
  			  }				    
  	    }
  		
  			String clipboardLink = serverPath + "/" + restContextName + "/private/jcr/" + repository + "/" + preferenceWS + node.getPath();
  			int depthChild = node.getDepth();
        if (!node.isNodeType(Utils.EXO_RESTORELOCATION) && !Utils.isTrashHomeNode(node)) {
          strActs +=  "<li class='menuItem'>";
          strActs +=  "<a exo:attr='CopyUrlToClipboard' style='display: block;' id='${drive}_treeclip_button$depthChild$counter' path='$clipboardLink'>" ;
          strActs +=  " <i class='uiIconEcmsCopyUrlToClipboard uiIconEcmsLightGrey'>" ;
          strActs +=  " </i> ";
	  			strActs +=	  _ctx.appRes("ECMContextMenu.event.GetURL");
	  			strActs +=  "</a>";
          strActs += "</li>";
        }	  			
        strActs += "</ul>";	    
	    }
	    def ctMenu = "" ;
	    def isLocked = false;
	    def lockedLabel = "";
      if (node.isLocked()) {
        isLocked = true;
        lockedLabel  = "("+_ctx.appRes("UIDocumentWorkspace.tooltip.LockedBy")+" "+node.getLock().getLockOwner()+")";
      }
	    def isSymLink = false;
	    def iconClassLink = "";
	    if(uicomponent.isSymLink(node)) {
	    	isSymLink = true;
	    	iconClassLink = "IconSymLink ";
	    }
	    
	    if(!uicomponent.isSymLink(node)) {		     
	      if(!uicomponent.hasChildNode(node)) iconType = "empty";				
	    }
	    def hiddenStyle = "";
	    if (node.isNodeType("exo:hiddenable")) hiddenStyle = "color: #A0A0A0;";
	    if(!uicomponent.isSystemWorkspace()) ctMenu = contextMenu.getJSOnclickShowPopup(preferenceWS + ":" + Utils.formatNodeName(node.getPath()), uicomponent.getActionsList(node)) ;
	    println "<li class=\"node\" >" ;
	    println "  <div class=\"${iconType}Icon\" id=\"" + uicomponent.encodeBase64(treeNode.getPath()) + "\" onclick=\"event.cancelBubble=true; if(eXo.ecm.ECMUtils.collapseExpand(this)) return; " + actionLink + "\">" ;
	    println "    <div id=\"iconTreeExplorer" + treeNode.getNodePath4ID() + "\" isFile=\"" + node.isNodeType("nt:file") + "\" onclick=\"event.cancelBubble=true;" + expandLink + "\" objectId=\"" + org.exoplatform.services.cms.impl.Utils.getObjectId(treeNode.getPath()) + "\" workspacename=\"" + preferenceWS + "\" " + ctMenu + ">" + strActs ;
	    println "		<a  onclick=\"event.cancelBubble=true;" + expandLink + "\" style='cursor: pointer;$hiddenStyle' rel=\"tooltip\" data-placement=\"bottom\" title=\"$treeNodeName $lockedLabel\"><i title=\"$treeNodeName\" class=\"" + Utils.getNodeTypeIcon(node, "uiIcon16x16") + "\">";
	    if (node.isLocked()) {
			println "<i class=\"iconLockedsmall\"></i>";
	    }
		if(uicomponent.isSymLink(node)) {
			println "<i class=\"iconLinkSmall\"></i>";
	    }		
		println " </i> <span class='nodeName'>$treeNodeName</span></a>" ;
	    println "    </div>" ; 
	    println "  </div>" ; 
	    if(treeNode.getChildrenSize() > 0) {
	      println "<ul class=\"nodeGroup\">" ;
	      writeNodes(treeNode) ;
	      if(uicomponent.isPaginated(treeNode)) {
			      println "<div class=\"node pageIterator\">"	    	
		    		_ctx.renderUIComponent(uicomponent.getUIPageIterator(treeNode.getPath())); 				
		    		println "</div>" ;
		    }		    	
	      println "</ul>" ;
	    }	    
	    println "</li>" ;	    	    	 			           	   
			counter ++ ;
		}			
  }  
  TreeNode treeNodeRoot = uicomponent.getRootTreeNode();
  treeNodeRoot.getNode().refresh(true);
  String contextMenuEvent = uicomponent.getRootActionList() ;
  def uiWorkingArea = uicomponent.getAncestorOfType(UIWorkingArea.class);
  def label = uicomponent.getLabel();
%>

<div class="JCRMoveAction" style="display: none;" 
		 request="<%=uiWorkingArea.getJCRMoveAction().event(UIWorkingArea.MOVE_NODE)%>" 
		 symlink="<%=uiWorkingArea.getCreateLinkAction().event(UIWorkingArea.CREATE_LINK)%>">
</div>

 
	<h5 class="title" style="cursor: pointer;" rel="tooltip" data-placement="bottom" title="$label" onclick="<%=uicomponent.event("Expand",treeNodeRoot.getPath())%>" $contextMenuEvent>
		<i class="uiIconEcmsHome"></i> ${label}
	</h5>			  	
			  	

  <div class="uiContentBox">
	  <div class="uiTreeExplorer" id="UITreeExplorer">
		    <ul class="nodeGroup">
		      <%
		        //re-initialize action
		       writeNodes(treeNodeRoot);
    	     uicomponent.getWorkingArea().initialize();
		       if(uicomponent.isPaginated(treeNodeRoot)) {%>
		       			<li class="node pageIterator">
		       				<% _ctx.renderUIComponent(uicomponent.getUIPageIterator(treeNodeRoot.getPath())); %>
		       			</li>       	
						<%}
					%>
		    </ul> 	    
		</div>
  </div>

