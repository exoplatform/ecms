<!DOCTYPE html 
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
           "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<%
  import java.util.Map;
  import java.util.Iterator;
  import java.util.ArrayList;
  import java.util.Enumeration;
  import org.json.JSONArray;  
  import org.apache.commons.lang.StringUtils;
  import org.exoplatform.webui.core.UIComponent;
  import org.exoplatform.portal.application.PortalRequestContext ;
  import org.exoplatform.portal.config.model.PortalProperties ;
  import org.exoplatform.services.seo.SEOService;
  import org.exoplatform.services.seo.PageMetadataModel;
  import org.exoplatform.portal.mop.user.UserNode;
  import org.exoplatform.portal.webui.portal.UIPortal;
  import org.exoplatform.portal.webui.util.Util;
  import org.exoplatform.portal.webui.workspace.UIPortalApplication;
  import org.exoplatform.portal.webui.workspace.UIWorkingWorkspace;
  import org.exoplatform.services.wcm.utils.WCMCoreUtils;
  import org.exoplatform.wcm.webui.reader.ContentReader;
  import org.exoplatform.services.wcm.portal.LivePortalManagerService;
  
  def rcontext = _ctx.getRequestContext() ;
  String docBase =  rcontext.getRequestContextPath() ;  
  String skin = uicomponent.getSkin();
  def portalSkins = uicomponent.getPortalSkins() ;
  def portletSkins = uicomponent.getPortletSkins() ;
  def scriptsURLs = uicomponent.getScripts();
  def headerScripts = new LinkedList();	
  def jsConfig = uicomponent.getJSConfig(); 
  def remoteScripts = new JSONArray();
  def portalName = Util.getPortalRequestContext().getUserPortalConfig().getPortalName();
  livePortalManagerService_ = WCMCoreUtils.getService(LivePortalManagerService.class);
  def portalNode = livePortalManagerService_.getLivePortal(WCMCoreUtils.getSystemSessionProvider(), portalName);
  def livePortalScript = WCMCoreUtils.getSiteGlobalActiveJs(portalNode);
  for (module in scriptsURLs.keySet()) {
    def url = !jsConfig.has("paths") ? null : 
              (!jsConfig.get("paths").has(module) ? null : jsConfig.get("paths").get(module));
//    def url = jsConfig.get("paths").get(module);
    headerScripts.add(url != null ? url + ".js" : module);      
    if (scriptsURLs.get(module)) {
      remoteScripts.put(module);
    }
  }
  def lang = uicomponent.getLocale().getLanguage();
  if(StringUtils.isNotEmpty(uicomponent.getLocale().getCountry()))
    lang += "_" + uicomponent.getLocale().getCountry();
  def title = rcontext.getTitle();
  def metaInformation = rcontext.getMetaInformation();
  def pcontext = (PortalRequestContext)rcontext;  
  
  UserNode currentNode = Util.getUIPortal().getSelectedUserNode();
  String pageReference = currentNode.getPageRef().format();
  
  def contentParam = "";
  def contentPath = "";
  ArrayList paramArray = null;
  if (!pcontext.useAjax()) {
  	Enumeration params = pcontext.getRequest().getParameterNames();   
  	Map paramsMap = pcontext.getRequest().getParameterMap();
  	if(params.hasMoreElements()) {
  		paramArray = new ArrayList();
    	while(params.hasMoreElements()) {
      		contentParam = params.nextElement().toString();
      		paramArray.add(pcontext.getRequestParameter(contentParam)); 
    	}
  	} 
  }    
  boolean hasMetadata = false;
  def keywords = "";
  def description = "";
  def robots = "";
  PageMetadataModel metaModel = null;
  try {
	  SEOService seoService = WCMCoreUtils.getService(SEOService.class);
	  if(seoService != null) {	  
		  metaModel = seoService.getMetadata(paramArray, pageReference, lang);
		  if(metaModel != null) {
		  	hasMetadata = true;
		  	if(StringUtils.isNotEmpty(metaModel.getTitle()))
		  	  title = metaModel.getTitle(); 
		  	keywords = ContentReader.getXSSCompatibilityContent(metaModel.getKeywords());
		  	description = ContentReader.getXSSCompatibilityContent(metaModel.getDescription());
		    robots = metaModel.getRobotsContent();    
		  }	   
	  }
  } catch(Exception ex) {}
%>

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="$lang" lang="$lang" dir="$dir">
  <head id="head">
    <title><%=title%></title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <%
        if(hasMetadata) {
          if(keywords != null && keywords.length() >0) {
	        %>
	          <meta name="keywords" content="<%=keywords%>" />
	        <% }
          if(description != null && description.length() >0) {
          %>
          	<meta name="description" content="<%=description%>" />
          <% }
          if(robots != null && robots.length() >0) {
          %>
          	<meta name="robots" content="<%=robots%>" />
          <% }
        } else if(metaInformation!= null) {
	    	Iterator<String> keys = metaInformation.keySet().iterator();
	    	while(keys.hasNext()) {
	    		String metaName = keys.next();
	    		String metaContent = metaInformation.get(metaName);
	  %>
	   	<meta name="<%=metaName%>" content="<%=metaContent%>" />
	  <% } } %>
	  
    <link rel="shortcut icon" type="image/x-icon"  href="<%=docBase%>/favicon.ico" />
    <%for(skinConfig in portalSkins) {
    def url = skinConfig.createURL(rcontext.controllerContext);
    url.setOrientation(orientation);
    %>
      <link id="${skinConfig.id}" rel="stylesheet" type="text/css" href="$url" />
    <%}%>
    <%for(portletSkin in portletSkins) {
    def url = portletSkin.createURL(rcontext.controllerContext);
    url.setOrientation(orientation);
    %>
      <link id="${portletSkin.id}" rel="stylesheet" type="text/css" href= "$url" />
    <%}%>
    <script type="text/javascript">
    var require = <%=jsConfig%>;
    </script>
    <% for (url in headerScripts) { %>
            <script type="text/javascript" src="<%= url %>"></script>
    <% } %>   
   <script type="text/javascript">
   //initialize eXo.ecm
     if (!eXo.ecm) {
       eXo.ecm = {};
     }   
     eXo.env.addLoadedRemoteScripts(<%=remoteScripts%>);
     <% if(org.exoplatform.commons.utils.PropertyManager.isDevelopping()) { %>
             eXo.developing = true ;
     <% } %>
     eXo.env.portal.context = "<%=docBase%>" ;
     eXo.env.portal.containerName = "<%=WCMCoreUtils.getPortalName() %>" ;
     <%
      if(rcontext.getAccessPath() == 0) {%>eXo.env.portal.accessMode = "public" ;<%}
     else {%>eXo.env.portal.accessMode = "private" ;<%}%>
     eXo.env.portal.portalName = "<%=rcontext.getPortalOwner()%>" ;
     eXo.env.server.context = "<%=docBase%>" ;
     eXo.env.server.portalBaseURL = "<%=rcontext.getRequest().getRequestURI()%>" ;
     eXo.env.server.portalURLTemplate = "<%=uicomponent.getPortalURLTemplate()%>" ;
     eXo.env.client.skin = "$skin" ;
     <% 
       UIPortal portal = uicomponent.findFirstComponentOfType(UIPortal.class);
       String sessionAliveLevel = (portal == null ? null : portal.sessionAlive) ;
       boolean canKeepState = sessionAliveLevel == null ? false : !sessionAliveLevel.equals(PortalProperties.SESSION_NEVER) ;
       boolean isSessionOpen = uicomponent.isSessionOpen();
     %>
     eXo.portal.portalMode = <%= uicomponent.getModeState() %>;
     eXo.session.canKeepState = $canKeepState;
     eXo.session.isOpen = $isSessionOpen;
     eXo.session.itvTime = ${((PortalRequestContext)rcontext).getRequest().getSession().getMaxInactiveInterval()} ;
     </script>
     <%
    def headerElements = rcontext.getExtraMarkupHeadersAsStrings();
    if (headerElements != null) 
    {
       for (element in headerElements)
       {
         print(element);  
       }
    }
    if(!StringUtils.isEmpty(livePortalScript)) { %>
    <script type="text/javascript">
    /* <![CDATA[ */ 
      <%=livePortalScript%>
    /* ]]> */   
    </script>
    <%}
   %>
 </head>

 <body style="height: 100%;">

 <div class="$uicomponent.skin" id="UIPortalApplication" style="!height: 100%;">
     
   <div class="ajaxLoadingMask clearfix" id="AjaxLoadingMask" style="display: none; margin: auto;">
		<a onclick="javascript:ajaxAbort();" class="uiIconClose uiIconWhite pull-right"></a>
		<i class="loadingProgressBar pull-left"></i>
		<div class="loadingText"><%=_ctx.appRes("UIPortalApplication.label.Loading")%></div>
   </div>